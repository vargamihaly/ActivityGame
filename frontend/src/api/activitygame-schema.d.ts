/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/Auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserResponseApiResponse"];
                        "application/json": components["schemas"]["UserResponseApiResponse"];
                        "text/json": components["schemas"]["UserResponseApiResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiResponse"];
                        "application/json": components["schemas"]["ApiResponse"];
                        "text/json": components["schemas"]["ApiResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserResponseApiResponse"];
                        "application/json": components["schemas"]["UserResponseApiResponse"];
                        "text/json": components["schemas"]["UserResponseApiResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiResponse"];
                        "application/json": components["schemas"]["ApiResponse"];
                        "text/json": components["schemas"]["ApiResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiResponse"];
                        "application/json": components["schemas"]["ApiResponse"];
                        "text/json": components["schemas"]["ApiResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiResponse"];
                        "application/json": components["schemas"]["ApiResponse"];
                        "text/json": components["schemas"]["ApiResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/username": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SetUsernameRequest"];
                    "text/json": components["schemas"]["SetUsernameRequest"];
                    "application/*+json": components["schemas"]["SetUsernameRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserResponseApiResponse"];
                        "application/json": components["schemas"]["UserResponseApiResponse"];
                        "text/json": components["schemas"]["UserResponseApiResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiResponse"];
                        "application/json": components["schemas"]["ApiResponse"];
                        "text/json": components["schemas"]["ApiResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiResponse"];
                        "application/json": components["schemas"]["ApiResponse"];
                        "text/json": components["schemas"]["ApiResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/GameEvents/{gameId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    gameId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Games/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Games/details/{gameId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    gameId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GameResponseApiResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Games/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["CreateGameResponseApiResponse"];
                        "application/json": components["schemas"]["CreateGameResponseApiResponse"];
                        "text/json": components["schemas"]["CreateGameResponseApiResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiResponse"];
                        "application/json": components["schemas"]["ApiResponse"];
                        "text/json": components["schemas"]["ApiResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Games/join/{gameId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    gameId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiResponse"];
                        "application/json": components["schemas"]["ApiResponse"];
                        "text/json": components["schemas"]["ApiResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiResponse"];
                        "application/json": components["schemas"]["ApiResponse"];
                        "text/json": components["schemas"]["ApiResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Games/start/{gameId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    gameId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StartGameResponseApiResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Games/end-turn/{gameId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    gameId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["EndTurnRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["EndTurnResponseApiResponse"];
                        "application/json": components["schemas"]["EndTurnResponseApiResponse"];
                        "text/json": components["schemas"]["EndTurnResponseApiResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiResponse"];
                        "application/json": components["schemas"]["ApiResponse"];
                        "text/json": components["schemas"]["ApiResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Games/leave-lobby/{gameId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    gameId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiResponse"];
                        "application/json": components["schemas"]["ApiResponse"];
                        "text/json": components["schemas"]["ApiResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiResponse"];
                        "application/json": components["schemas"]["ApiResponse"];
                        "text/json": components["schemas"]["ApiResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Games/leave/{gameId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    gameId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Games/settings/{gameId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    gameId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateGameSettingsRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiResponse"];
                        "application/json": components["schemas"]["ApiResponse"];
                        "text/json": components["schemas"]["ApiResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ApiResponse"];
                        "application/json": components["schemas"]["ApiResponse"];
                        "text/json": components["schemas"]["ApiResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiResponse: {
            success?: boolean;
            message?: string | null;
            errorCode?: components["schemas"]["ErrorCode"];
        };
        CreateGameResponse: {
            /** Format: uuid */
            gameId?: string;
        };
        CreateGameResponseApiResponse: {
            success?: boolean;
            message?: string | null;
            errorCode?: components["schemas"]["ErrorCode"];
            data?: components["schemas"]["CreateGameResponse"];
        };
        EndTurnRequest: {
            winnerUserId: string | null;
        };
        EndTurnResponse: {
            isGameWon: boolean;
        };
        EndTurnResponseApiResponse: {
            success?: boolean;
            message?: string | null;
            errorCode?: components["schemas"]["ErrorCode"];
            data?: components["schemas"]["EndTurnResponse"];
        };
        /** @enum {string} */
        ErrorCode: "GameNotFound" | "PlayerAlreadyInGame" | "InvalidGameState" | "HostValidationFailed" | "InvalidGameSettings" | "InvalidPlayerCount" | "UserNotFound" | "UserNotAuthenticated";
        GameResponse: {
            /** Format: uuid */
            id: string;
            hostId: string | null;
            /** Format: int32 */
            timerInMinutes: number;
            /** Format: int32 */
            maxScore: number;
            players: components["schemas"]["PlayerResponse"][] | null;
            status: components["schemas"]["GameStatus"];
            currentRound?: components["schemas"]["RoundResponse"];
            enabledMethods: components["schemas"]["MethodType"][] | null;
        };
        GameResponseApiResponse: {
            success?: boolean;
            message?: string | null;
            errorCode?: components["schemas"]["ErrorCode"];
            data?: components["schemas"]["GameResponse"];
        };
        /** @enum {string} */
        GameStatus: "Waiting" | "InProgress" | "Finished";
        /** @enum {string} */
        MethodType: "Drawing" | "Description" | "Mimic";
        PlayerResponse: {
            id: string | null;
            username: string | null;
            /** Format: int32 */
            score: number | null;
            isHost?: boolean | null;
        };
        RoundResponse: {
            /** Format: int32 */
            roundNumber?: number;
            methodType: components["schemas"]["MethodType"];
            word: string | null;
            activePlayerUsername: string | null;
        };
        SetUsernameRequest: {
            username: string | null;
        };
        StartGameResponse: {
            /** Format: uuid */
            gameId: string;
            nextActivePlayer: string | null;
            nextWord: string | null;
            methodType: string | null;
        };
        StartGameResponseApiResponse: {
            success?: boolean;
            message?: string | null;
            errorCode?: components["schemas"]["ErrorCode"];
            data?: components["schemas"]["StartGameResponse"];
        };
        UpdateGameSettingsRequest: {
            /** Format: int32 */
            timer: number;
            /** Format: int32 */
            maxScore: number;
            enabledMethods: components["schemas"]["MethodType"][] | null;
        };
        UserResponse: {
            id: string | null;
            email: string | null;
            username: string | null;
            /** Format: int32 */
            score: number | null;
            isHost?: boolean | null;
        };
        UserResponseApiResponse: {
            success?: boolean;
            message?: string | null;
            errorCode?: components["schemas"]["ErrorCode"];
            data?: components["schemas"]["UserResponse"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
